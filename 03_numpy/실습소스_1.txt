
####################################################
### 1차원 배열 생성

import numpy as np

# 1) 1차원 정수 배열(벡터) 생성 방법 1 - np.array(리스트) 이용
list_value = [10,20,30]  # list, tuple, set , 정수의 기본 dtype은  int32 ( 4byte )
vector1 = np.array(list_value)
print(vector1, type(vector1), vector1.dtype)

# 2) ndarray 속성
data = [10,20,30,40,50]
vector1 = np.array(data)

print("1. 벡터의 차원(dimension,axis)갯수:", vector1.ndim) # 1
print("2. 벡터의 각 차원의 크기(shape):", vector1.shape) # tuple로 반환 (5,)
print("3. 벡터의 총 요소 갯수(size):", vector1.size)   # 5
print("4. 벡터의 저장 데이터 type(dtype):", vector1.dtype) # int32 (4 byte )

##################################################################
# 랜덤값
'''
   2. 랜덤값
    가. np.random.seed(1234)
    나. np.random.random([갯수]) : 0.0 <= 값 < 1.0 사이의 임의의 float 값 반환, 갯수 생략하면 1 개 반환
    다. np.random.rand([갯수]) :  0 ~ 1의 균등분포에서 표본 추출, 갯수 생략하면 1 개 반환
    라. np.random.randn([갯수]) :  표준편차가 1이고 평균값이 0인 정규분포에서 표본 추출. 갯수 생략하면  1개반환
    마. np.random.randint(최소범위, 최대범위, n개) : 주어진 최소(inclusive) ~ 최대(exclusive) 범위안에서 임의의 정수 n개 반환
        np.random.randint(최대범위, size=n개) :   0 ~ 최대(exclusive) 범위안에서 임의의 정수 n개 반환
        
    바. np.random.choice(리스트)  : 주어진 리스트에서 임의의 값 1개 반환
    사. np.random.shuffle(리스트)  :  주어진 리스트를 shuffle 함.  in-pacle(True)로 동작됨.
'''

import numpy as np

# 1) 랜덤값 고정
np.random.seed(1234)

# 2) np.random.random([갯수])
# 0.0 <= 값 < 1.0 사이의 임의의 float 5개 랜덤값 반환. 갯수 생략하면  1개반환
print("1. random(5)")
arr = np.random.random()
arr = np.random.random(5)
print(arr)

# 3) np.random.rand([갯수])
# 0 ~ 1의 균등분포에서 표본 추출. 갯수 생략하면  1개반환
print("2. rand(5)")
arr = np.random.rand()
arr = np.random.rand(5)
print(arr)

# 3) np.random.randn([갯수])
# 표준편차가 1이고 평균값이 0인 정규분포에서 표본 추출. 갯수 생략하면  1개반환
print("3. randn(5)")
arr = np.random.randn()
arr = np.random.randn(5)
print(arr)

# 4) np.random.randint(low, high, n)
# 주어진 최소/최대 범위 안에서 임의의 난수 n개 추출
print("4. randint(1,10,3)")
arr = np.random.randint(1,10,3)
print(arr)

# 4) np.random.randint(high, size=n)
# 0 ~ 최대(exclusive) 범위안에서 임의의 정수 n개 반환
print("4. randint(5, size=4): ")
arr = np.random.randint(5, size=4)
print(arr)

# 5) np.random.choice(리스트)
# 주어진 리스트에서 임의의 값 1개 반환
print("5. np.random.choice(['foo','bar','baz']")
choice_value = np.random.choice(['foo','bar','baz'])
print(choice_value)

# 6) np.random.shuffle(리스트)
# 주어진 리스트를 shuffle 함.  in-pacle(True)로 동작됨.
print("6. np.random.shuffle(1,3,56,7,98])")
shuffle_value = [1,3,56,7,98]
np.random.shuffle(shuffle_value)
print(shuffle_value)

##################################################################
# 특정값

'''
   3. 특정값으로 설정

   가.  np.zeros(shape) : shape만큼  0.0 으로 채움. 기본 type은 float64
                        만약 정수형으로 저장하기 위해서는 dtype=np.int32 지정한다.
   나.  np.ones(shape) : shape만큼  1.0 으로 채움. 기본 type은 float64
                        만약 정수형으로 저장하기 위해서는 dtype=np.int32 지정한다.

   다.  np.empty(shape) : 초기화하지 않았기 때문에 임의의(arbitrary) 값으로 채움.

         Returns
        -------
        out : ndarray
            Array of uninitialized (arbitrary) data of the given shape, dtype, and
            order.  Object arrays will be initialized to None.
            
   라. np.full(shape, 값) : shape만큼 지정된 값으로 채움
'''
import numpy as np


# 1. np.zeros(shape)
# shape만큼 0으로 채움. 기본 type은 float64
print("1. np.zeros(5):")
data = np.zeros(5)
# data = np.zeros(5, dtype=np.int32) # [0 0 0 0 0] int32
print(data, data.dtype) # [0. 0. 0. 0. 0. ] float64

# 2. np.ones(shape)
# shape만큼  1.0 으로 채움. 기본 type은 float64
print("2. np.ones(5):")
data = np.ones(5)
# data = np.ones(5, dtype=np.int32)
print(data , data.dtype) # [1. 1. 1. 1. 1.] float64

# 3. np.empty(shape)
# shape 만큼 임의의 값으로 채워짐 ==> 임의의 값으로 초기화 시킨 것
print("3. np.empty(3)")
data = np.empty(3)
data = np.empty(3, dtype=np.int32)
print(data , data.dtype ) # [1868832878 1847620453 1965061231] int32

# 4. np.full(shape, 값)
# shape 만큼 지정된 값으로 채워짐
print("4. full(5, 10)")
data = np.full(5, 10)
print(data) # [10 10 10 10 10]

##################################################################
# np.arange
'''
   4. np.arange([start,] stop[, step] 함수
     ==> 파이썬의  range 함수와 동일한 기능 제공, 단, 지정된 값의 타입에 따라서 반환됨.

    가. 변수 = np.arrange(n)		#  [0,n) 범위의 정수 , 만약 n값이 실수이면 실수값 반환됨.
	나. 변수 = np.arrange(n,m)	#  [n,m) 범위의 정수
	다. 변수 = np.arrange(n, dtype=np.float32)   #  [0,n) 범위의 실수
        변수 = np.arrange( n실수값 )   #  [0, n) 범위의 실수
'''
import numpy as np

print("1. arange(10)")
data = np.arange(10)  # [0,10)형식으로 표현
print(data)  # [0 1 2 3 4 5 6 7 8 9]

print("2. arange(1,11)")
data = np.arange(1,11) # [1,11)형식으로 표현
print(data) # [ 1  2  3  4  5  6  7  8  9 10]

print("3. arange(1,11,2)")
data = np.arange(1,11,2) # start, end(exclusive), step
print(data) # [1 3 5 7 9]

# float값으로 설정하기
print("4. float으로 설정1")
data = np.arange(5, dtype=np.float32)
print(data) # [0. 1. 2. 3. 4.]

print("4. float으로 설정2")
# float값 지정하면 float 값 반환됨.
data = np.arange(5.0)
print(data) # [0. 1. 2. 3. 4.]


##################################################################
# np.linspace
'''
   np.linspace(start, stop, [num=50, endpoint=True])
     => [start,stop] 범위사이의 값을 num개 생성, 기본 type은 float64, num 값을 지정하지 않으면 기본은 50
     => 기본적으로 stop값이 범위에 포함됨.  interval [`start`, `stop`].
        포함시키지 않을려면  endpoint=False 로 지정한다. Default is True.
'''
import numpy as np

print("1. np.linspace(0, 1, 11)")
# 0 <= 값 <= 1 사이의 값을 11개 생성
data = np.linspace(0, 1, 11 )
print(data, data.dtype)  # [0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. ]   float64

print("2. np.linspace(0, 0.9, 10)")
# 0 <= 값 <= 0.9 사이의 값을 10개 생성
data = np.linspace(0, 0.9, 10)
print(data) # [0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9]


##################################################################
##################################################################
# 1차원 배열 삭제
'''

     1. ndarray 삭제

      문법:
        arr = np.delete(arr, idx|fancy|slice, axis )

      - 삭제된 새로운 배열을 반환
      - axis=None 이면 flatten 적용됨.
      - slice인 경우에는  np.s_[::2]  형식 사용한다.


     2. 값으로 삭제

        - np.where( (arr==5) | (arr==8)) 활용하여 일치하는 인덱스를 먼저 찾고 삭제한다.

'''
import numpy as np

# 1. idx|fancy|slice 삭제
print("1. idx로 삭제")
arr = np.array([9,8,7,5,4,3])
new_arr = np.delete(arr,0)
print(arr)       # [9 8 7 5 4 3]
print(new_arr)   # [8 7 5 4 3]

print("2. fancy 삭제")
arr = np.array([9,8,7,5,4,3])
new_arr = np.delete(arr, [0,3,5] ) # fancy 인덱싱
print(arr)       # [9 8 7 5 4 3]
print(new_arr)   # [8 7 4]

print("3. slice 삭제,  np.s_[::2]")
arr = np.array([9,8,7,5,4,3])
new_arr = np.delete(arr, np.s_[0:4] ) # slice 삭제
print(arr)       # [9 8 7 5 4 3]
print(new_arr)   # [4 3]


# 2. 값으로 삭제하는 방법
arr = np.array([9,8,7,5,4,3])
xx = np.delete(arr, np.where(arr == 5)) # 5 값 삭제,
print(arr) #[9 8 7 5 4 3]
print(xx) # [9 8 7 4 3]

print(np.where(arr == 5)) # (array([3], dtype=int64),)
print(np.where((arr == 5)|(arr==8))) # (array([1, 3], dtype=int64),)

arr = np.array([9,8,7,5,4,3])
xx = np.delete(arr, np.where((arr==5)|(arr==8))) # 5 와 8 값 삭제,
print(arr) #[9 8 7 5 4 3]
print(xx) # [9 7 4 3]


##################################################################
##################################################################
# 1차원 배열 추가 및 삽입
'''

     1. ndarray 추가

      문법:
        arr = np.append(arr, values, axis=None)

      - 추가된 새로운 배열을 반환
      - axis=None 이면 flatten 된후에 추가된다.


     2. ndarray 삽입

       문법:
         arr = np.insert(arr, idx|fancy|slice, value,  axis ).

         - fancy 사용시 value와 shape가 일치해야 된다.
'''
import numpy as np

#  1. ndarray 추가
#  np.append(arr,  value,  axis )
arr = np.array([9,8,7,5,4,3])
new_arr = np.append(arr, [1,2,3])
print(arr)       # [9 8 7 5 4 3]
print(new_arr)   # [9 8 7 5 4 3 1 2 3]


#  2. ndarray 삽입
#  np.insert(arr, idx|fancy, value,  axis )

# 가. idx 이용
arr = np.array([9,8,7,5,4,3])
new_arr = np.insert(arr, 0, [1,2,3])
print(arr)  # [9 8 7 5 4 3]
print(new_arr)  # [1 2 3 9 8 7 5 4 3]

# 나. fancy 이용
arr = np.array([9,8,7,5,4,3])
new_arr = np.insert(arr, [0,3,1], [1,2,3])  # 0->1 , 3->2, 1->3 삽입됨. 따라서 갯수가 일치해야 된다.
print(arr)        #  [9 8 7 5 4 3]
                  #   1 9 8 7 5 4 3  <- 0에 1 삽입후
                  #   1 9 8 7 2 5 4 3  <- 0에 1 삽입후
                  #   1 9 3 8 7 2 5 4 3  <- 1에 3 삽입후
print(new_arr)    #  [1 9 3 8 7 2 5 4 3]

#  다. slice 이용
arr = np.array([9,8,7,5,4,3])
new_arr = np.insert(arr, np.s_[0:2], [1,2])
print(arr)  # [9 8 7 5 4 3]
            #  1 9 8 7 5 4 3 <- 0에 1 삽입후
            #  1 9 2 8 7 5 4 3 <- 1에 2 삽입후
print(new_arr)  # [1 9 2 8 7 5 4 3]
