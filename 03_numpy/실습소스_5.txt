'''
   유틸리티 함수 - axis 이용하여 행별 또는 열별로 연산

    1. np.prod: 1, 2차원 배열 원소간 곱계산인 product
    2. np.cumprod: 배열 원소간 누적 곱하기

    1. np.sum: 1, 2차원 배열 원소간 합
    2. np.cumsum: 배열 원소간 누적 합하기

    2. np.mean ==> 평균
    3. np.var ==> 분산 ( 관측값에서 평균을 뺀값을 제곱하고 모두 더해서 갯수로 나눈다. 즉, 차이값의 제곱의 평균이다.
    4. np.std ==> 표준 편차 ( 분산을 제곱근한 것이다. 제곱해서 값이 뻥튀기된 것을 다시 원래되로 복원)

'''


import numpy as np
# 1. np.prod: 1차원 배열 원소간 곱계산인 product
b = np.array([1, 2, 3, 4])
print("1. original: " , b ) # [1 2 3 4]
print("2. np.prod(arr): " , np.prod(b) ) # 1*2*3*4 = 24

# 2. np.prod: 2차원 배열 원소간 곱계산인 product
c = np.array([[1, 2], [3, 4],[5,6]])
print("3. original: " , c )
print("4. np.prod(axis=0): " , np.prod(c , axis=0) ) # [15 48]    위 * 아래 ( axis=0 인 행축 기준 )
print("5. np.prod(axis=1): " , np.prod(c , axis=1) ) # [ 2 12 30] 왼쪽 * 오른쪽 ( axis=1인 열축 기준 )

# 3. np.nanprod: NaN 을 1로 간주하고 배열 원소 간 곱처리
c = np.array([[1, 2], [3, np.nan]])
print("6.original: " , c )
print("7. np.prod(axis=0): " , np.prod(c , axis=0) ) # [ 3. nan]      위 * 아래 ( axis=0 인 행축 기준 )
print("8. np.prod(axis=1): " , np.prod(c , axis=1) ) # [ 2. nan]      왼쪽 * 오른쪽 ( axis=1인 열축 기준 )
print("9. np.nanprod(axis=0): " , np.nanprod(c , axis=0) ) # [3. 2.]  위 * 아래
print("10. np.nanprod(axis=1): " , np.nanprod(c , axis=1) ) # [2. 3.] 왼쪽 * 오른쪽

# 4. np.cumprod: 배열 원소간 누적 곱하기
c = np.array([[1, 2], [3, 4],[5,6]])
print("11. original: " , c )
print("12. np.cumprod(axis=0): ", np.cumprod(c, axis=0)) # [[ 1 2][ 1*3 2*4] [1*3*5 2*4*6]]
print("13. np.cumprod(axis=1): ", np.cumprod(c, axis=1)) # [[ 1 1*2] [3 3*4] [5 5*6]]

# 단항 유니버셜 함수3 - sum, nansum, cumsum

# 1. np.sum: 1차원 배열 원소간 합
b = np.array([1, 2, 3, 4])
#print("average:" , np.average(b))
print("1. original: " , b ) # [1 2 3 4]
print("2. np.sum: " , np.sum(b) ) # 1+2+3+4 = 10                        , 스칼라 값으로 배월 원소 간 합을 반환
print("3. np.sum(keepdims=True): " , np.sum(b , keepdims=True) ) # [10] , 1차원 배열로 배열 원소 간 합을 반환

# 2. np.sum: 2차원 배열 원소간 합
c = np.array([[1, 2], [3, 4],[5,6]])
print("4. original: " , c )
print("5. np.sum(axis=0): " , np.sum(c , axis=0) ) # [ 9 12]    위 + 아래  ( axis=0 인 행축 기준 )
print("6. np.sum(axis=1): " , np.sum(c , axis=1) ) # [ 3  7 11] 왼쪽 + 오른쪽 ( axis=1인 열축 기준 )

# 3. np.nansum: NaN 을 0로 간주하고 배열 원소 간 합처리
c = np.array([[1, 2], [3, np.nan]])
print("7. original: " , c )
print("8. np.sum(axis=0): " , np.sum(c , axis=0) ) # [ 4. nan]       위 + 아래
print("9. np.sum(axis=1): " , np.sum(c , axis=1) ) # [ 3. nan]       왼쪽 + 오른쪽
print("10. np.nansum(axis=0): " , np.nansum(c , axis=0) ) # [4. 2.]  위 + 아래
print("11. np.nansum(axis=1): " , np.nansum(c , axis=1) ) # [3. 3.]  왼쪽 + 오른쪽

# 4. np.cumsum: 배열 원소간 누적 합하기
c = np.array([[1, 2], [3, 4],[5,6]])
print("12. original: " , c )
print("13. np.cumsum(axis=0): ", np.cumsum(c, axis=0) ) # [[ 1 2][1+3 2+4][1+3+5 2+4+6]]
print("14. np.cumsum(axis=1): ", np.cumsum(c, axis=1) ) # [[ 1 1+2][3 3+4][5 5+6]]

# 5. np.mean ==> 평균
print("9.  1차원 배열 np.mean(arr) : ", np.mean([1, 2, 3, 4]))  # 2.5
print("10. 2차원 배열 np.mean(arr, axis=0): ",
      np.mean([[1, 2, 3, 4],[1, 2, 3, 4]], axis=0))  # [1. 2. 3. 4.]
print("11. 2차원 배열 np.mean(arr, axis=1):",
      np.mean([[1, 2, 3, 4],[1, 2, 3, 4]], axis=1))  # [2.5 2.5]
      
# 6. np.var ==> 분산 ( 관측값에서 평균을 뺀값을 제곱하고 모두 더해서 갯수로 나눈다. 즉, 차이값의 제곱의 평균이다.
print("12. 1차원 배열 np.var(arr): ", np.var([1, 20, 3, 40]))  # 246.5
print("13. 2차원 배열 np.var(arr, axis=0): ",
      np.var([[1, 20, 3, 40],[4, 6, 7, 80]], axis=0))  # [  2.25  49.     4.   400.
print("14. 2차원 배열 np.var(arr, axis=1): ",
      np.var([[1, 20, 3, 40],[4, 6, 7, 80]], axis=1))  # [ 246.5    1037.1875]

# 7. np.std ==> 표준 편차 ( 분산을 제곱근한 것이다. 제곱해서 값이 뻥튀기된 것을 다시 원래되로 복원)
print("15. 1차원 배열 np.std(arr): ", np.std([1, 20, 3, 40]))  # 15.700318468107582
print("16. 2차원 배열 np.std(arr, axis=0): ",
      np.std([[1, 20, 3, 40],[4, 6, 7, 80]], axis=0))  # [ 1.5  7.   2.  20. ]
print("17. 2차원 배열 np.std(arr, axis=1): ",
      np.std([[1, 20, 3, 40],[4, 6, 7, 80]], axis=1))  # [15.70031847 32.20539551]

'''
   유틸리티 함수 - axis 이용하여 행별 또는 열별로 연산

    1. np.max: 1, 2차원 최대
    2. np.min: 1, 2차원 최소

    3. np.argmax : 1, 2차원 최대값에 해당하는 인덱스 반환
    4. np.argmin : 1, 2차원 최소값에 해당하는 인덱스 반환

    5. np.sort :  1, 2차원 정렬

         - 2차원 배열인 경우
           axis=None 이면 flatten 되어 정렬
           axis=0 이면  행방향이기 때문에 컬럼단위로 정렬
           axis=1 이면  열방향이기 때문에 행단위로 정렬
    
    6. np.all, np.any ==> 논리값을 가진 다차원 배열을 하나의 논리값으로 처리할 때 사용
    
    7. 전치  (Transpose)
    
    8. 행렬곱( dot product(점곱), 곱해서 합 ) ==>  np.dot(a,b),  a @ b
'''

# 6. 최대/최소값
data = np.array([8,2,4,5,10,1])
print("1. 1차원 배열 np.max(arr): " , np.max(data))
print("2. 1차원 배열 np.min(arr): " , np.min(data))

data = np.array(np.arange(16).reshape(4,4))
print("3. 2차원 배열, 각 열에서 최대값:" , np.max(data,  axis=0)) # [12 13 14 15]
print("4. 2차원 배열, 각 열에서 최소값:" , np.min(data,  axis=0 )) # [0 1 2 3]
print("5. 2차원 배열, 각 행에서 최대값:" , np.max(data,  axis=1)) # [ 3  7 11 15]
print("6. 2차원 배열, 각 행에서 최소값:" , np.min(data,  axis=1 )) # [ 0  4  8 12]

# 7.  최대/최소값에 해당하는 인덱스 반환
data = np.array([8,2,4,5,10,1])
print("1. 1차원 배열 최대 index값: " , np.max(data), np.argmax(data)) # 10 4
print("2. 1차원 배열 최소 index값: " , np.min(data), np.argmin(data)) # 1  5


data = np.array([[6,2,4],[10,1,54],[66,3,21]])
'''
[[ 6  2  4]
 [10  1 54]
 [66  3 21]]
'''
print("3. 2차원 배열, 각 열에서 최대 index값:" , np.argmax(data,  axis=0)) # [2 2 1]
print("4. 2차원 배열, 각 열에서 최소 index값:" , np.argmin(data,  axis=0 )) # [0 1 0]
print("5. 2차원 배열, 각 행에서 최대 index값:" , np.argmax(data,  axis=1)) # [0 2 0]
print("6. 2차원 배열, 각 행에서 최소 index값:" , np.argmin(data,  axis=1 )) # [1 1 1]


# 8.  1차원 정렬
data = np.array([8,2,4,5,10,1])
print("1. 1차원 배열 sort 전: ",data) # [ 8  2  4  5 10  1]
print("2. 1차원 배열 sort 후(오름차순): ",np.sort(data)) # [ 1  2  4  5  8 10]
print("3. 1차원 배열 sort 후(내림차순): ",np.sort(data)[::-1]) # [10  8  5  4  2  1]
print()

# 9. 2차원 정렬
data = np.array([[8,2,4,5,10,1],[100,67,33,77,66,90]])

data3 = np.sort(data, axis=None) # flattened
print("6. axis=None(flattened):", data3) # [  1   2   4   5   8  10  33  66  67  77  90 100]
print()
arr = np.array([[8,2,4],[100,67,33],[99,44,77]])
# [[  8   2   4]
#  [100  67  33]
#  [ 99  44  77]]
data4 = np.sort(arr, axis=0) # 컬럼단위로 정렬
print(data4)
# [[  8   2   4]
#  [ 99  44  33]
#  [100  67  77]]
data4 = np.sort(arr, axis=1)  # 행단위로 정렬
print(data4)
# [[  2   4   8]
#  [ 33  67 100]
#  [ 44  77  99]]

# 5. np.all, np.any ==> 논리값을 가진 다차원 배열을 하나의 논리값으로 처리할 때 사용
print("1. 모든 값이 True 냐?: ", np.all([True, True])) #  True
x = np.array([1,0,0,0])
print("2. np.all(arr): ", np.all(x)) #  False
print("3. np.any(arr): ", np.any(x)) #  True

# 6. np.all, np.any 활용
a = np.array([1, 2, 3, 4])
b = np.array([4, 3, 2, 1])
print("all a>b ?:", np.all(a > b)) # False

# 7. 전치  (Transpose)
arr = np.arange(15).reshape(3,5)
print("1. original: ", arr)
print()
print("2. T:", arr.T)  # Transpose
print("3. transpose()",arr.transpose())  # Transpose

# 8. 행렬곱( dot product(점곱), 곱해서 합 ) ==>  np.dot(a,b),  a @ b
'''
  벡터 내적: 1차원인 벡터간의 곱연산후 합 의미
  행렬곱(점곱, dot product): 행렬간의 곱연산후 합 의미
'''
arr = np.arange(4).reshape(2,2)
print("1. original: ",arr)
print("2. np.dot(arr, arr2) - 행렬곱:  ",  np.dot(arr,arr))
print("4. arr @ arr2) - 행렬곱:  ",  arr @ arr )
arr = np.arange(4)
print("5. 벡터 내적: ", np.dot(arr, arr)) # 0*0 + 1*1 + 2*2 + 3*3 = 14
