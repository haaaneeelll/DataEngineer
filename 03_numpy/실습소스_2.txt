####################################################
####################################################
####################################################
### 2차원 배열 생성
'''
    2차원 배열 생성

  1) np.array(중첩리스트) 이용
     arr2D = np.array([[],[]])

  2) 1차원 --> 2차원으로 변경
      arr1D.shape = (행, 열)
      arr1D.shape = (행, -1)  ==> 행크기에 의해서 열크기가 자동 지정됨
      arr1D.shape = (-1, 열)  ==> 열크기에 의해서 행크기가 자동 지정됨

'''
import numpy as np

# 1) np.array(중첩리스트) 이용
arr1 = [[1,2,3],[4,5,6]]
arr2D = np.array(arr1)
print("1. 2차원 행렬 생성: \n", arr2D, type(arr2D))  # <class 'numpy.ndarray'>

# 2) 1차원을 2차원으로 변경, shape 속성 사용
arr1D = np.array([1,2,3,4,5,6])
print(arr1D)  # [1 2 3 4 5 6]
# arr1D.shape=(2, 3)
# arr1D.shape=(2, -1) # 행크기에 의해서 열크기가 자동 지정됨
arr1D.shape=(-1, 3)   # 열크기에 의해서 행크기가 자동 지정됨
print("2. 1차원을 2차원으로 변경: \n", arr1D) # [[1 2 3][4 5 6]]
print()



####################################################
### 2차원 배열 삭제
'''
      문법:
        arr = np.delete(arr, idx|fancy|slice, axis )

      - 삭제된 새로운 배열을 반환
      - slice인 경우에는  np.s_[::2]  형식 사용한다.

      - axis=None 이면 flatten 적용됨.
        axis=0 이면 행 제거
        axis=1 이면 열 제거

'''
import numpy as np

arr2D = np.arange(25).reshape(5,5)
'''
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]
 [20 21 22 23 24]]
'''
# 1. idx 이용한 삭제
# 2차원에서 axis 지정하지 않으면 flatten 된다.
xxx = np.delete(arr2D, -1)
print(xxx) # [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]

# 2. fancy 이용한 삭제
# 2차원에서 axis 지정하지 않으면 flatten 된다.
xxx = np.delete(arr2D, [0,-1])
print(xxx)  # [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]

# 3. slice 이용한 삭제
# 2차원에서 axis 지정하지 않으면 flatten 된다.
xxx = np.delete(arr2D, np.s_[:8])
print(xxx) # [ 8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24]

########################################################
# 4. idx + axis=0 이용한 삭제 ==> 행이 삭제됨
xxx = np.delete(arr2D, -1, axis=0)
print(xxx)
'''
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]]
'''
xxx = np.delete(arr2D, [0,-1], axis=0)
print(xxx)
'''
[[ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]]
'''
xxx = np.delete(arr2D, np.s_[:3], axis=0)
print(xxx)
'''
[[15 16 17 18 19]
 [20 21 22 23 24]]
'''

########################################################
# 5. idx + axis=1 이용한 삭제 ==> 열이 삭제됨
xxx = np.delete(arr2D, -1, axis=1)
print(xxx)
'''
[[ 0  1  2  3]
 [ 5  6  7  8]
 [10 11 12 13]
 [15 16 17 18]
 [20 21 22 23]]
'''
xxx = np.delete(arr2D, [0,-1], axis=1)
print(xxx)
'''
[[ 1  2  3]
 [ 6  7  8]
 [11 12 13]
 [16 17 18]
 [21 22 23]]
'''
xxx = np.delete(arr2D, np.s_[:3], axis=1)
print(xxx)
'''
[[ 3  4]
 [ 8  9]
 [13 14]
 [18 19]
 [23 24]]
'''

####################################################
### 2차원 배열 추가 및 삽입
'''

     1. ndarray 추가

      문법:
        arr = np.append(arr, values, axis=None)

      - 추가된 새로운 배열을 반환
      - axis=None 이면 flatten 된후에 추가된다.
        axis=0 이면 행 추가. 반드시 shape가 일치해야 된다.
        axis=1 이면 열 추가. 반드시 shape가 일치해야 된다.

     2. ndarray 삽입

       문법:
         arr = np.insert(arr, idx|fancy, value,  axis ).

         - fancy 사용시 value와 shape가 일치해야 된다.
'''
import numpy as np

arr = np.array([[1,2,3],[4,5,6]])
'''
[[1 2 3]
 [4 5 6]]
'''
# 1. append 함수
# 1) axis=None 지정한 추가
# 2차원에서 axis 지정하지 않으면 flatten 되어 추가됨. 따라서 dimension 일치하지 않아도 된다.
xxx = np.append(arr, [100,200,300,400])
print(xxx)  # [  1   2   3   4   5   6 100 200 300 400]

# 2) axis=0 지정한 추가 ==> 행 추가
xxx = np.append(arr, [[100,200,300]], axis=0)
print(xxx)
'''
[[  1   2   3]
 [  4   5   6]
 [100 200 300]]
'''
# 3) axis=1 지정한 추가 ==> 열 추가
xxx = np.append(arr, [[100],[200]], axis=1)
print(xxx)
'''
[[  1   2   3 100]
 [  4   5   6 200]]
'''
##############################################

# 2. insert 함수
# 1) axis=None 지정한 삽입
# 2차원에서 axis 지정하지 않으면 flatten 되어 추가됨. 따라서 dimension 일치하지 않아도 된다.
xxx = np.insert(arr, 0,  [100,200,300,400])
print(xxx)  # [100 200 300 400   1   2   3   4   5   6]

# 2) axis=0 지정한 삽입 ==> 행 삽입
xxx = np.insert(arr, 0,  [[100,200,300]], axis=0)
print(xxx)
'''
[[100 200 300]
 [  1   2   3]
 [  4   5   6]]
'''
# 3) axis=1 지정한 삽입 ==> 열 삽입
xxx = np.insert(arr, 0, [[100],[200]], axis=1)
print(xxx)
'''
[[100 200   1   2   3]
 [100 200   4   5   6]]
'''


####################################################
### 타입변경

import numpy as np

# 1. int --> float으로
data = [10,20,30]
arr1 = np.array(data)
arr2 = np.array(data , dtype=np.float64)
arr3 = arr1.astype(np.float64)
print("1. 원본 데이터: ", arr1.dtype , arr1)  # int32 [10 20 30]
print("2. int값을 float으로 변경 1: ", arr2.dtype , arr2)  # float64 [10. 20. 30.]
print("2. int값을 float으로 변경 2: ", arr3.dtype , arr3)  # float64 [10. 20. 30.]

# 2. float --> int 으로
data = [10.5,20.7,30.23]
arr1 = np.array(data)
arr2 = np.array(data , dtype=np.int64)
arr3 = arr1.astype(np.int64)
print("3. 원본 데이터: ", arr1.dtype , arr1)  # float64 [10.5  20.7  30.23]
print("4. float 값을 int 으로 변경 1: ", arr2.dtype , arr2) # int64 [10 20 30]
print("4. float 값을 int 으로 변경 2: ", arr3.dtype , arr3) # int64 [10 20 30]
print()

# 3. int --> bytes , str
data = [10,20,30]
arr1 = np.array(data)
arr2 = np.array(data , dtype=np.string_)  # bytes 타입,  np.string 안됨.
arr3 = arr1.astype(np.string_)
arr4 = np.array(data , dtype=np.str_)   # str 타입 , dtype=np.str_ 가능
arr5 = arr1.astype(np.str_)
print("5. 원본 데이터: ", arr1.dtype , arr1)  # int32 [10 20 30]
print("6. int 값을 bytes 으로 변경 1: ", arr2.dtype , arr2) # |S2 [b'10' b'20' b'30']
print("6. int 값을 bytes 으로 변경 2: ", arr3.dtype , arr3) # |S11 [b'10' b'20' b'30']
print("7. int 값을 str 으로 변경 : ", arr4.dtype , arr4) # <U2 ['10' '20' '30']
print("7. int 값을 str 으로 변경 : ", arr5.dtype , arr5) # <U11 ['10' '20' '30']


# 4. str --> int
data =['10','20','30']
arr1 = np.array(data)
arr2 = arr1.astype(np.int32)
print("8. str 값을 int 으로 변경 :",arr2) # [10 20 30]

arr3 = np.array(data).astype(np.int32)
print(arr3) # [10 20 30]
