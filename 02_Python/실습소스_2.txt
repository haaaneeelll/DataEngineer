#########################################################################
### 집합형 데이터 ###########################################################
#########################################################################

#1. 문자열 함수
s = "sequence"
print("1. 문자열 길이:", len(s)) # 8
print("2. 특정문자 포함횟수:", s.count('e')) # 3
print("3. 소문자로:", "HeLLo".lower()) # hello
print("4. 대문자로:", "HeLLo".upper()) # HELLO
print("5. swap 문자로:", "HeLLo".swapcase()) # hEllO
print("6. 공백제거:\n")
print("    HeLLo    ".lstrip()) #
print("HHeLLH".lstrip("H")) # eLLH
print(len("    HeLLo    ".lstrip())) # 9
print("    HeLLo    ".rstrip()) #
print("HHeLLHH".rstrip("H")) # HHeLL
print("    HeLLo    ".strip()) #
print("HHeLLHH".strip("H")) # eLL
print(len("    HeLLo    ".strip())) # 5
print("7. 문자열 변경:", "HeLHO".replace('H', 'A')) # AeLAO
print("8. 구분자:", "aaa/bbb/ccc".split("/")) # ['aaa', 'bbb', 'ccc']
print('9. 특정 글자 시작 : ', s.startswith('s'), s.startswith('a')) # True False
print('10. 특정 글자 끝 : ', s.endswith('e'), s.endswith('x')) # True False
print("11. 문자로만 구성?", "대한Heloo".isalpha())  # True
print("11. 문자로만 구성?", "12".isalpha())   # False
print("11. 숫자로만 구성?", "12".isnumeric())   # True
print("12. S.find(sub[, start[, end]]) -> int")
print("12. 검색위치1:", s.find('e')) # 1
print("12. 검색위치2:", s.find('e', 2)) # 4
print("12. 검색위치3:", s.rfind('e')) # 7
print("13. join:", ",".join(["A", "B", "C"])) # A,B,C
print("14. center:", "Hello".center(20, "_")) # 20 자리수로 표시하고 _로 마킹
print("15. rjust:", "Hello".rjust(20, "_")) # 20 자리수로 표시하고 _로 마킹
print("16. ljust:", "Hello".ljust(20, "_")) # 20 자리수로 표시하고 _로 마킹
print("17. capitalize:", "heLLOX".capitalize()) # 첫글자 대문자

print("18. 멤버쉽 연산자1:", "H" in "Hello") # True
print("19. 멤버쉽 연산자2:", "X" in "Hello") # False

# 2. 문자열 인덱싱과 슬라이싱
m = "대한민국"

# 1) 인덱싱(indexing)
print("1:", m[0])  #  대
print("2:", m[-1]) #  국

# 2) 슬라이싱
print("3:", m[0:3]) # 대한민
print("4:", m[1:]) # 한민국
print("5:", m[:2]) #  대한
print("6:", m[-3:-1]) # 한민
print("7:", m[-3:]) #  한민국
print("7:", m[:-1]) #  대한민
print("8:", m[0:3:2]) #대민
print("9:", m[:])   #대한민국
print("10:", m*2)    #대한민국대한민국
print("11:", m[::-1])    # 국민한대
print("11:", m[::-2])    # 국한

#########################################################################
### 집합형 데이터 ###########################################################
#########################################################################

# 1. 리스트 
# 1)리스트 생성
string_list = ['abc', 'defghi']
int_list = [1, 2, 3, 4]
empty_list = []
mixed_list = [1, 'abc', True, 2.34, None]
nested_list = [['a', 'b', 'c'], [1, 2, 3]]
xxx = list('hello') # ['h', 'e', 'l', 'l', 'o']
xxx2 = list((10,20,30)) # [10, 20, 30]

print(int_list)
print(empty_list)
print(int_list*2) # 반복출력
print(xxx, xxx2)

# 2) 리스트 추가,삽입,병합,삭제
m = [1,2,3]
m.append(10)
m.append([9,8])
m.append((100,200))
print("1. append:",m) #[1, 2, 3, 10, [9, 8], (100, 200)]

# 삽입
m.insert(0,100)
m.insert(0,[4,5,6])
print("2. insert:",m) # [[4, 5, 6], 100, 1, 2, 3, 10, [9, 8], (100, 200)]

# 병합 ( extend 또는  + )
x = [1,2,3]
x.extend([10])
x.extend([9,8])
x.extend("XYZ")
x.extend((7,))  # tuple
print("3. extend:",x) # [1, 2, 3, 10, 9, 8, 'X', 'Y', 'Z', 7]

# 리스트 삭제
kk4 = [1,2,3,4]
kk4.pop()  # pop(-1) 과 동일
kk4.pop(0)
print("9. pop 함수(위치)",kk4)
print()
kk4.remove(2)  # 값에 의한 삭제
print("10. remove(값): ", kk4)
del kk4[0]  # 위치에 의한 삭제
print("11. del(위치)", kk4)
kk4.clear()
print("12. clear: " , kk4)

# etc
print("4. 리스트 길이:" , len([1,2,3,4]))
print("5. 포함 갯수:" , [10,2,3,2,9,2].count(2))
x3 = [100,200,300]
print("6. 특정 위치:" , x3.index(200))
print("7. 포함 여부1:" , 9 in [9,8,7])
print("7. 포함 여부2:" , 6 in [9,8,7])
x = [1,2,3]
x.reverse()
print("8. 거꾸로(자신이 변경):" , x)  # [3, 2, 1]
print()
y = reversed(x)  # 뒤집힌 새로운 객체 반환
print("8. 거꾸로(새로운 객체반환):", x, list(y))  # [3, 2, 1] [1, 2, 3]

# 3) 리스트 정렬1- sort 함수
xxx = [88,2,5,3,9,7,10]
xxx.sort()
print("13. 오름차순 정렬:",  xxx)
xxx.sort(reverse=True)       #역순으로 정렬
print("13. 내림차순 정렬:",  xxx)

yyy = ['123', '9999', '43']
yyy.sort()
print("14. 기본 문자열 정렬:",  yyy)
yyy.sort(key=int)
print("14. 문자형을 수치형으로 변환하여  정렬:",  yyy)  #문자열이지만 숫자형으로 정렬
zz = ['홍길동','김', '박혁거세']
zz.sort(key=len, reverse=True)
print("14. 길이에 따라서  정렬:",  zz)  # ['김', '홍길동', '박혁거세']

# 3) 리스트 정렬2- sorted 함수
zzz = [3,1,2]
zzz2 = sorted(zzz)
zzz3 = sorted(zzz,reverse=True)
print("15. 정렬전:",  zzz )
print("15. 정렬후 1:",  zzz2 )
print("15. 정렬후 2:",  zzz3 )
print("15. 원본 정렬후:",  zzz)


# 4) 리스트 인덱싱과 슬라이싱
# 1차원 리스트
arr = [1,2,3,4,5,6,7,8,9,10]
print("original: ", arr)  # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print("all: ", arr[:])    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print("reverse: ", arr[::-1])  # [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
print("1 부터 끝까지: ", arr[1:])  # [2, 3, 4, 5, 6, 7, 8, 9, 10]
print("0 부터 5까지: ", arr[:6])   # [1, 2, 3, 4, 5, 6]
print("2 부터 5까지: ", arr[2:6])  # [3, 4, 5, 6]
print("맨 마지막: ", arr[-1])     # 10
print("맨 마지막에서 두번째 : ", arr[-2])     # 9

# 2차원 리스트
arr = [[1,2,3,4,5], [10,20,30,40,50]]
print("original: ", arr)
print("all: ", arr[:])
print("arr[0]: ", arr[0]) # [1, 2, 3, 4, 5]
print("arr[1]: ", arr[1]) # [10, 20, 30, 40, 50]
print("arr[0][:3] ", arr[0][:3] ) # [1, 2, 3]

#####################################################################
#####################################################################

# 2. 튜플
# 1) 튜플 생성
xx = (10,20,30,43)
xx2 = tuple([9,8,7,7,6,8,9])
xx3 = (100,)  # 값 하나 가진 튜플 생성
print(xx, xx2) # (10, 20, 30, 43) (9, 8, 7, 7, 6, 8, 9)
print(tuple("hello")) # ('h', 'e', 'l', 'l', 'o')

# 2) 튜플 함수
print("튜플 길이:" , len((1,2,3,4)))
print("포함 갯수:" , (10,2,3,2,9,2).count(2))
x3 = (100,200,300)
print("특정 위치:" , x3.index(200))
print("포함 여부1:" , 9 in (9,8,7))
print("포함 여부2:" , 6 in (9,8,7))
print()

# 3) 인덱싱 및 슬라이싱
kk = (1,2,3,4,5)
print("특정 값:" , kk[0])
print("slice:" , kk[0:3])
print("slice:" , kk[:6])
print("slice:" , kk[3:])
print("slice:" , kk[:])
print()
kk3 =(1,2,3,(9,8,7))
print("중첩 :" , kk3)
print("특정 값 출력1:" , kk3[3][0])
print("특정 값 출력2:" , kk3[3][2:])
print("특정 값 출력3:" , kk3[3][:2])

#########################################################################
### 집합형 데이터 ###########################################################
#########################################################################

# 1 . 셑 ( set ) ==> immutable 값만 저장 가능하다. (매우 중요 )

# 1.셋 생성
m = {1,2,3,1} # {1, 2, 3}
m2 = set() # set()
print(set("hello")) # {'e', 'o', 'l', 'h'}

# 여러 요소값 저장 가능하지만 mutable 값 저장 불가 
m3 = {10,20,"홍길동",(100,200)}
print(m3) # {10, 20, '홍길동', (100, 200)}
#m4 = {10,20,"홍길동",[1,2]}  # mutable 데이터인 리스트 저장 불가
# print(m4)  # 에러
#print(m*2) # error , 반복출력 불가

# 2. set 함수
# 가. 값 추가 ==> 반드시 immutable 만 가능
m = {1,2,3}
m.add(10)
m.add("홍길동")
m.add((9,8))
print("add:",m) # {1, 2, 3, 10, (9, 8), '홍길동'}

# 나. union 연산되는 update
m2 = {1,2}
m2.update({3,4})
print("update1_set:" , m2) # {1, 2, 3, 4}
m2.update([5,6,7])
print("update2_list:" , m2) # {1, 2, 3, 4, 5, 6, 7}
m2.update((9,10))
print("update3_tuple:" , m2) # {1, 2, 3, 4, 5, 6, 7, 9, 10}

# 다. 삭제 ==> discard 와 remove
m2 = {1,2,3,4}
m2.discard(4)  #  If the element is not a member, do nothing.
print(m2)
m2.remove(3)  #  If the element is not a member, raise a KeyError.
print(m2)
m2.pop()      #  Raises KeyError if the set is empty.
print(">>>>>>>>>>>>>>>>>", m2)

# 라. set 함수
print("set 길이:" , len({1,2,3,4,5}))
x3 = {100,200,300}
print("포함 여부1:" , 9 in {9,8,7})
print("포함 여부2:" , 6 in {9,8,7})
print()
x3.clear()
print(x3)
print()

# 6) set 연산자 및 함수
a = {1,2,3,1}
b = {3,4}
print("union:" , a.union(b)) # {1, 2, 3, 4}
print("intersection:" , a.intersection(b)) # {3}
print("difference: 차집합" , a.difference(b)) # {1, 2}
print("exclusive difference: 대칭 차집합" ,
      a.symmetric_difference(b)) # {1, 2, 4}

#################################################################
#################################################################

# 2. 딕트(dict)
# 1) 딕트 ( dict ) 생성 : immutable한 키와 mutable한 값으로 구성
m0 = {}
m1 = dict()  
m2 = {'name':'홍길동1','age':20}
m3 = dict(name='홍길동2', age=20) 

# 2) 딕셔너리 함수
print(dir(dict))
help(dict)

# (1) dict 추가
coffee = {'espresso':'에스프레소', 'latte':'라떼'}
print(coffee)
coffee['lungo'] = '룽고'    #요소를 추가
print("요소추가:", coffee)

# (2) dict 변경 ==> 내부적으로 union으로 처리된다.
coffee['latte'] = '라떼2'
print("요소변경:",coffee)

# (3) dict 삭제 ==> del
del coffee['lungo']        #요소를 삭제
print("요소삭제1:",coffee)
coffee.pop('latte')        #요소를 삭제
print("요소삭제2:",coffee)

coffee.clear()            #요소 전체 삭제
print("요소전체삭제:",coffee)

# (4) 병합 또는 한꺼번에 수정: update
x = {'name':'유관순','age':20}
y = {'address':'seoul'}
x.update(y)
print("병합1:",x) # {'name': '유관순', 'age': 20, 'address': 'seoul'}
x.update({'name':'aaa2','age':202})
print("한꺼번에 병합2:",x) # {'name': 'aaa2', 'age': 202, 'address': 'seoul'}

#  (5) dict  정보 얻기
coffee = {'espresso': '에스프레소', 'latte': '라떼'}
print(coffee)
print(len(coffee))  # 길이 출력, 2
print(coffee['espresso'])  # 키를 이용해 값을 조회,  없으면 에러 , 에스프레소
print(coffee.get('latte'))  # key로 value 얻기 , 라떼
print(coffee.get('latt2e', 'Not a Coffee'))  #  없으면 기본값 출력 , 기본값 지정안하면 None 출력
print()
print(coffee.keys())  # key 목록 출력, dict_keys(['espresso', 'latte'])
print(coffee.values())  # value 목록 출력, dict_values(['에스프레소', '라떼'])
print(coffee.items())  # key, value 출력, dict_items([('espresso', '에스프레소'), ('latte', '라떼')])


# (6) 두 개의 자료구조를 하나로 묶음 ==> 짝이 안맞는 것은 제외됨.
a = ['a','b','c']
b = [10,20,30,40]
print(dict(zip(a,b)))  # {'a': 10, 'b': 20, 'c': 30}

################################################################
################################################################

# 집합 자료형 변환

# list -> tuple,set
a = [10,20,30]
a2 = tuple(a)
a3 = set(a)
print(a) # [10, 20, 30]
print(a2) # (10, 20, 30)
print(a3) # {10, 20, 30}

# set -> list, tuple
a = {10,20,30}
a2 = list(a)
a3 = tuple(a)
print(a) # {10, 20, 30}
print(a2) # [10, 20, 30]
print(a3) # (10, 20, 30)

# tuple -> list, set
a = (10,20,30)
a2 = list(a)
a3 = set(a)
print(a) # (10, 20, 30)
print(a2) # [10, 20, 30]
print(a3) # {10, 20, 30}

# dict -> list,set,tuple (키만 추출)
a = {"name":"홍길동","age":100}
a2 = list(a)
a3 = set(a)
a4 = tuple(a)
print(a)
print(a2) # ['name', 'age']
print(a3) # {'name', 'age'}
print(a4) # ('name', 'age')


# str --> list , tuple
print( list("홍길동길")) # ['홍', '길', '동', '길']
print( tuple("홍길동길")) # ('홍', '길', '동', '길')
print( set("홍길동길")) # {'길', '홍', '동'}