###########################################
### 1.  Pandas 이용한 날짜 데이터 처리
'''
    날짜 데이터 처리

   1. str --> datetime로 변환
      pd.to_datetime('날짜')

  2. datetime을 지정된 범위에서 반환
      pd.date_range('날짜', '날짜')

   3.  DatetimeProperties 속성 이용한 날짜 정보 구하기
      df['xxx'].dt.year

   4. datetime --> str로 변환
      df['xxx'].astype(str)
'''

# scientists.csv
'''
Name,Born,Died,Age,Occupation
Rosaline Franklin,1920-07-25,1958-04-16,37,Chemist
William Gosset,1876-06-13,1937-10-16,61,Statistician
Florence Nightingale,1820-05-12,1910-08-13,90,Nurse
Marie Curie,1867-11-07,1934-07-04,66,Chemist
Rachel Carson,1907-05-27,1964-04-14,56,Biologist
John Snow,1813-03-15,1858-06-16,45,Physician
Alan Turing,1912-06-23,1954-06-07,41,Computer Scientist
Johann Gauss,1777-04-30,1855-02-23,77,Mathematician
'''

###########################################
### 2.  병합(merge)
'''
    병합(merge)

   1. inner 병합

      가. 공통 컬럼 이용
          new_df = pd.merge(df, df2,  how=“inner”  on=“공통컬럼명”)
          new_df = pd.merge(df, df2,  how=“inner”  on=“공통컬럼명”, indicator=True).query("조건식").drop(columns=[컬럼,.])

      나. 비공통 컬럼 이용
          new_df = pd.merge(df, df2, how='inner', left_on="x1", right_on="y1")
          new_df = pd.merge(df, df2, how='inner', left_on="x1", right_on="y1")
                     .query("조건식")
                     .drop(columns=[컬럼,.])
                     .rename(columns={컬럼:컬럼})

    2. outer 병합
          가. 공통컬럼 이용
              pd.merge(df, df2,  how=“left|right|outer”,  on=“컬럼명”)
          나. 비공통컬럼 이용
              pd.merge(df, df2,  how“left|right|outer”,  left_on=“컬럼명”,  right_on=“컬럼명” )
                 .query("조건식")
                 .drop(columns=[컬럼,.])
                 .rename(columns={컬럼:컬럼})

'''
# 1) 공통컬럼
df1 = pd.DataFrame({"x1":['A','B','C'],
                    "x2":[1, 2, 3]})

df2 = pd.DataFrame({"x1":['A','B','D'],
                    "x3":['T','F','T'],
                    "x4":['T1','F1','T1']})
                    
 # on=리스트                    
  df = pd.DataFrame(
[
    ['T1', 'G1', 1, 1],
    ['T2', 'G1', 1, 1],
    ['T3', 'G1', 2, 1],
    ['T4', 'G2', 1, 1],
    ['T5', 'G3', 1, 1]
], columns=['TrasactionID', 'GoodsID', 'GoodsIDSeqNo', 'Quantity'])

df2 = pd.DataFrame(
[
    ['G1', 1, 1000],
    ['G1', 2, 1100],
    ['G2', 1, 2000],
    ['G2', 2, 2200]
], columns=['GoodsID', 'GoodsIDSeqNo', 'GoodsPrice'])                  
                    
                    
# 2) 비공통컬럼                    
df1 = pd.DataFrame({"x1":['A','B','C'],
                    "x2":[1, 2, 3]})

df2 = pd.DataFrame({"y1":['A','B','D'],
                    "x3":['T','F','T']})     
                    
                   
###########################################
### 3.   컬럼과 index 이용한 병합                   
'''

    컬럼과 index 이용한 병합

     pd.merge(df, df2,  how=“inner”,  left_on=“컬럼명”, right_on=“인덱스” )
     pd.merge(df2, df,  how=“inner”,  left_on="인덱스", right_on=“컬럼명” )

     pd.merge(df, df2,  how=“inner”,  left_on=“컬럼명”, right_index=True )
     pd.merge(df2, df,  how=“inner”,  right_on=“컬럼명”, left_index=True )

'''

df1 = pd.DataFrame({"key":['a','b','a','a','b','c'], "value":range(6)})
df2 = pd.DataFrame({"group_val":[3.5,7]} , index=['a','b'])

###########################################
### 4.  index 과 index 이용한 병합  
'''
 index 이용한 병합
 
     pd.merge(df, df2,  left_on=“인덱스”, right_on=“인덱스” )

      pd.merge(df, df2,  left_on=“인덱스”, right_index=True )

      pd.merge(df, df2,  right_on=“인덱스”, left_index=True )

      pd.merge(df, df2,  left_index=True, right_index=True )
'''
df1 = pd.DataFrame({"key":['a','b','a','a','b','c'],
                     "value":range(6)},
                    index=list('KBSMVC'))
                    
df2 = pd.DataFrame({"g_value":[3.5, 7]},
                    index=['K','S'],
                    )
###########################################
### 4.  df.groupby 이용
###########################################
department = {"deptno":[10,20,30,40],'dname':['개발','인사','영업','관리'],'loc':['서울','부산','제주','광주']}
employee = {"empno":['A1','A2','A3','A4','A5'],"ename":['홍길동','유관순','안중근','강감찬','이순신'],
            "sal":[1000,1500,2300,3400,4500],"hireday":['2019/01/02','2018/01/02','2017/01/02','2016/01/02','2015/01/02'],
            "deptno":[10,20,10,30,10]}
department_df = pd.DataFrame(department)
employee_df = pd.DataFrame(employee)
###########################################
### 5.  csv 파일 
###########################################
'''
|Date|Open|High|Low|Close|Volume
0|7/21/2014|83.46|83.53|81.81|81.93|2359300
1|7/18/2014|83.3|83.4|82.52|83.35|4020800
2|7/17/2014|84.35|84.63|83.33|83.63|1974000
3|7/16/2014|83.77|84.91|83.66|84.91|1755600
4|7/15/2014|84.3|84.38|83.2|83.58|1874700
5|7/14/2014|83.66|84.64|83.11|84.4|1432100
6|7/11/2014|83.55|83.98|82.85|83.35|2001400
7|7/10/2014|85.2|85.57|83.36|83.42|2713300
8|7/9/2014|84.83|85.79|84.76|85.5|1540700
9|7/8/2014|86.29|86.57|84.69|84.69|2164000

'''

